# Render Blueprint for RepoRadar
# This file defines the infrastructure-as-code configuration for deploying RepoRadar on Render
# Documentation: https://render.com/docs/blueprint-spec

services:
  # Main Web Service - Serves both API and Frontend
  - type: web
    name: reporadar
    runtime: node
    region: oregon # Choose region closest to your users (oregon, frankfurt, singapore, etc.)
    plan: starter # Options: free, starter, standard, pro, pro plus
    branch: main # Git branch to auto-deploy from
    
    # Build Configuration
    buildCommand: npm ci --legacy-peer-deps && npm run build
    startCommand: npm run start
    
    # Health Check Configuration
    healthCheckPath: /health
    
    # Auto-Deploy Configuration
    autoDeploy: true
    
    # Environment Variables
    # IMPORTANT: Sensitive values should be set in Render Dashboard, not committed to git
    envVars:
      # === REQUIRED ENVIRONMENT VARIABLES ===
      # These MUST be configured in Render Dashboard before deployment
      
      - key: NODE_ENV
        value: production
      
      - key: PORT
        value: 10000 # Render's default port
      
      - key: HOST
        value: 0.0.0.0
      
      # Database - REQUIRED
      # Set this to your Neon PostgreSQL connection string
      # Format: postgresql://user:password@host/database?sslmode=require
      - key: DATABASE_URL
        sync: false # Must be set manually in Render Dashboard
      
      # AI Services - REQUIRED
      # Primary AI provider (Google Gemini)
      - key: GEMINI_API_KEY
        sync: false # Must be set manually in Render Dashboard
      
      # Session Security - REQUIRED
      # Generate with: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
      - key: SESSION_SECRET
        generateValue: true # Render will auto-generate a secure value
      
      - key: SESSION_ENCRYPTION_KEY
        generateValue: true # Render will auto-generate a secure value
      
      # === OPTIONAL BUT RECOMMENDED ===
      
      # Redis - Optional (enables caching, sessions, WebSocket scaling)
      # If not set, application falls back to memory cache and PostgreSQL sessions
      - key: REDIS_URL
        sync: false # Set if using Render Redis or external Redis
      
      # GitHub API - Optional (increases rate limits)
      - key: GITHUB_TOKEN
        sync: false
      
      # AI Fallback - Optional (OpenAI GPT-5 as backup)
      - key: OPENAI_API_KEY
        sync: false
      
      # Stripe - Optional (for payment processing)
      - key: STRIPE_SECRET_KEY
        sync: false
      
      - key: STRIPE_PUBLISHABLE_KEY
        sync: false
      
      - key: STRIPE_WEBHOOK_SECRET
        sync: false
      
      - key: STRIPE_PRO_PRICE_ID
        sync: false
      
      - key: STRIPE_ENTERPRISE_PRICE_ID
        sync: false
      
      # Email Service - Optional (for notifications)
      - key: RESEND_API_KEY
        sync: false
      
      - key: EMAIL_FROM
        value: noreply@reporadar.com
      
      - key: EMAIL_FROM_NAME
        value: RepoRadar
      
      # Application URL - Set to your Render domain
      - key: APP_URL
        value: https://reporadar.onrender.com # Update with your actual domain
      
      # Password Reset URL
      - key: PASSWORD_RESET_URL
        value: https://reporadar.onrender.com/reset-password
      
      # === DATABASE CONFIGURATION ===
      
      - key: DB_POOL_MIN
        value: 2
      
      - key: DB_POOL_MAX
        value: 10 # Adjust based on instance size (Starter: 10, Standard: 20)
      
      - key: DB_POOL_IDLE_TIMEOUT
        value: 30000
      
      - key: DB_POOL_CONNECTION_TIMEOUT
        value: 5000
      
      - key: DB_QUERY_MONITORING_ENABLED
        value: true
      
      - key: DB_SLOW_QUERY_THRESHOLD
        value: 1000
      
      - key: DB_LOG_SLOW_QUERIES
        value: true
      
      - key: DB_AUTO_CREATE_INDEXES
        value: true
      
      # === CACHE CONFIGURATION ===
      
      - key: CACHE_ENABLED
        value: true
      
      - key: CACHE_TYPE
        value: memory # Will auto-upgrade to 'redis' if REDIS_URL is set
      
      - key: CACHE_MEMORY_MAX_SIZE
        value: 100
      
      - key: CACHE_MEMORY_MAX_ENTRIES
        value: 10000
      
      - key: CACHE_DEFAULT_TTL
        value: 3600
      
      - key: CACHE_COMPRESSION_ENABLED
        value: true
      
      - key: CACHE_COMPRESSION_THRESHOLD
        value: 1024
      
      # === SECURITY CONFIGURATION ===
      
      - key: FORCE_HTTPS
        value: true
      
      - key: SECURITY_HEADERS_ENABLED
        value: true
      
      - key: CSP_ENABLED
        value: true
      
      - key: HSTS_MAX_AGE
        value: 31536000
      
      - key: HSTS_INCLUDE_SUBDOMAINS
        value: true
      
      - key: SESSION_REGENERATE_ON_LOGIN
        value: true
      
      - key: SESSION_TIMEOUT
        value: 604800000 # 7 days
      
      - key: BCRYPT_ROUNDS
        value: 12
      
      # === COMPRESSION CONFIGURATION ===
      
      - key: COMPRESSION_ENABLED
        value: true
      
      - key: COMPRESSION_THRESHOLD
        value: 1024
      
      - key: COMPRESSION_ALGORITHMS
        value: gzip,brotli
      
      - key: COMPRESSION_LEVEL
        value: 6
      
      # === GITHUB API OPTIMIZATION ===
      
      - key: GITHUB_OPTIMIZATION_ENABLED
        value: true
      
      - key: GITHUB_BATCH_SIZE
        value: 10
      
      - key: GITHUB_BATCH_DELAY
        value: 100
      
      - key: GITHUB_CACHE_TTL
        value: 300
      
      - key: GITHUB_MAX_RETRIES
        value: 3
      
      - key: GITHUB_CACHING_ENABLED
        value: true
      
      # === PERFORMANCE MONITORING ===
      
      - key: PERFORMANCE_MONITORING_ENABLED
        value: true
      
      - key: METRICS_COLLECTION_INTERVAL
        value: 60
      
      - key: PERFORMANCE_ALERTING_ENABLED
        value: true
      
      - key: ALERT_THRESHOLD_DB_QUERY_TIME
        value: 1000
      
      - key: ALERT_THRESHOLD_API_RESPONSE_TIME
        value: 2000
      
      - key: ALERT_THRESHOLD_ERROR_RATE
        value: 5
      
      - key: PERFORMANCE_DASHBOARD_ENABLED
        value: true
      
      # === FRONTEND PERFORMANCE ===
      
      - key: FRONTEND_CODE_SPLITTING_ENABLED
        value: true
      
      - key: FRONTEND_LAZY_LOADING_ENABLED
        value: true
      
      - key: FRONTEND_TREE_SHAKING_ENABLED
        value: true
      
      - key: FRONTEND_STATIC_CACHE_DURATION
        value: 31536000
      
      # === FEATURE FLAGS ===
      # Set to false to disable specific features for rollback
      
      - key: FEATURE_BACKGROUNDJOBS
        value: true
      
      - key: FEATURE_HEALTHCHECKS
        value: true
      
      - key: FEATURE_MONITORING
        value: true
      
      - key: FEATURE_LOADINGSTATES
        value: true
      
      - key: FEATURE_ERRORHANDLING
        value: true
      
      - key: FEATURE_ANALYTICSTRACKING
        value: true
      
      - key: FEATURE_MOBILERESPONSIVE
        value: true
      
      - key: FEATURE_ACCESSIBILITY
        value: true
      
      - key: FEATURE_ADMINDASHBOARD
        value: true
      
      - key: FEATURE_HORIZONTALSCALING
        value: true
      
      # === RATE LIMITING ===
      
      - key: RATE_LIMIT_STORAGE
        value: memory # Will auto-upgrade to 'redis' if REDIS_URL is set
      
      - key: RATE_LIMIT_API_FREE_LIMIT
        value: 100
      
      - key: RATE_LIMIT_API_FREE_WINDOW
        value: 3600000
      
      - key: RATE_LIMIT_API_PRO_LIMIT
        value: 1000
      
      - key: RATE_LIMIT_API_PRO_WINDOW
        value: 3600000
      
      - key: RATE_LIMIT_ANALYSIS_FREE_LIMIT
        value: 10
      
      - key: RATE_LIMIT_ANALYSIS_FREE_WINDOW
        value: 86400000
      
      - key: RATE_LIMIT_ANALYSIS_PRO_LIMIT
        value: 100
      
      - key: RATE_LIMIT_ANALYSIS_PRO_WINDOW
        value: 86400000

# Optional: Add Redis for enhanced performance
# Uncomment the section below to provision a Redis instance
# Note: Redis is required for horizontal scaling (multiple instances)
#
# databases:
#   - name: reporadar-redis
#     plan: starter # Options: starter, standard, pro
#     region: oregon # Should match web service region
#     ipAllowList: [] # Empty = allow all Render services

# Deployment Notes:
# 
# 1. BEFORE FIRST DEPLOYMENT:
#    - Set DATABASE_URL in Render Dashboard (Neon PostgreSQL connection string)
#    - Set GEMINI_API_KEY in Render Dashboard
#    - Update APP_URL to match your Render domain
#    - Optionally set REDIS_URL, GITHUB_TOKEN, STRIPE keys, etc.
#
# 2. AFTER DEPLOYMENT:
#    - Verify health check: https://your-app.onrender.com/health
#    - Test application functionality
#    - Monitor logs in Render Dashboard
#    - Check performance metrics: https://your-app.onrender.com/api/performance/dashboard
#
# 3. FOR HORIZONTAL SCALING:
#    - Provision Redis (uncomment databases section above)
#    - Set REDIS_URL environment variable
#    - Increase instance count in Render Dashboard
#
# 4. CUSTOM DOMAIN:
#    - Add custom domain in Render Dashboard
#    - Update APP_URL environment variable
#    - Update PASSWORD_RESET_URL environment variable
#    - Update CSP_DIRECTIVES if needed
#
# 5. MONITORING:
#    - Health endpoint: /health
#    - Performance dashboard: /api/performance/dashboard
#    - Logs: Render Dashboard > Logs tab
#    - Metrics: Render Dashboard > Metrics tab
#
# 6. ROLLBACK:
#    - Automatic: Health check failures trigger auto-rollback
#    - Manual: Render Dashboard > Events > Rollback to previous version
#
# For detailed deployment instructions, see:
# - docs/RENDER_DEPLOYMENT_GUIDE.md
# - docs/RENDER_DEPLOYMENT_CHECKLIST.md
# - docs/RENDER_ENV_TEMPLATE.md
# - docs/RENDER_TROUBLESHOOTING.md
